snippet main
	public static void main (String [] args)
	{
		${1:/* code */}
	}
snippet pu
	public
snippet po
	protected
snippet pr
	private
snippet st
	static
snippet fi
	final
snippet ab
	abstract
snippet re
	return
snippet br
	break;
snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet th
	throw 
snippet sy
	synchronized
snippet im
	import
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet if
	if (${1}) ${2}
snippet el
	else 
snippet elif
	else if (${1}) ${2}
snippet wh
	while (${1}) ${2}
snippet for
	for (${1}; ${2}; ${3}) ${4}
snippet fore
	for (${1} : ${2}) ${3}
snippet sw
	switch (${1}) ${2}
snippet cs
	case ${1}:
		${2}
	${3}
snippet tc
	public class ${1:`Filename()`} extends ${2:TestCase}
snippet t
	public void test${1:Name}() throws Exception ${2}
snippet cl
	class ${1:`Filename("", "untitled")`} ${2}
snippet in
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }${5}
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
snippet logP
	java.util.Properties logProperties = new java.util.Properties();
	logProperties.put("log4j.appender.Stdout", "org.apache.log4j.ConsoleAppender");
	logProperties.put("log4j.appender.Stdout.layout", "org.apache.log4j.PatternLayout");
	logProperties.put("log4j.appender.Stdout.layout.conversionPattern", "%d %p [%c:%L - %M] - %m%n");
	logProperties.put("log4j.rootLogger", "INFO,Stdout");
	logProperties.put("log4j.debug ", " false");
	logProperties.put("log4j.configDebug ", " false");
	org.apache.log4j.PropertyConfigurator.configure(logProperties);
snippet testc
	@Test
	public void testCase${1:#:Name}() throws Exception {
	    ${0:TARGET}
	}

snippet dlogger
	private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(${1:`Filename()`}.class);
snippet logi
	logger.info(${1});
snippet logd
	logger.debug(${1});
snippet logw
	logger.warn(${1});
snippet loge
	logger.error(${1});
